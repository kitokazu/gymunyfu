generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  username             String         @unique
  name                 String?
  image                String?
  bio                  String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  clerkId              String         @unique
  location             String?
  comments             Comment[]
  following            Follows[]      @relation("follower")
  followers            Follows[]      @relation("following")
  likes                Like[]
  notificationsCreated Notification[] @relation("notificationsCreator")
  notifications        Notification[] @relation("userNotifications")
  posts                Post[]
}

model Post {
  id            String         @id
  content       String?
  image         String?
  createdAt     DateTime       @default(now())
  authorId      Int
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]
  notifications Notification[] @relation("postNotifications")
  user          User           @relation(fields: [authorId], references: [id])
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  createdAt     DateTime       @default(now())
  postId        String
  authorId      Int
  user          User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id])
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    Int
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    Int
  creatorId Int
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  creator   User             @relation("notificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?            @relation("postNotifications", fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
